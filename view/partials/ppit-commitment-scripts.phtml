function getParams() {

	// Create a new FormData object.
	var params = '?', todo = true;

<?php foreach ($context->getConfig('commitment/search'.(($type) ? '/'.$type : ''))['main'] as $propertyId => $rendering) : ?>

	<?php if ($rendering == 'range') : ?>
	
	if (document.getElementById('search_check_min_<?php echo $propertyId ?>').checked) {
		var min_<?php echo $propertyId ?> = document.getElementById('search_min_<?php echo $propertyId ?>').value;
		if (min_<?php echo $propertyId ?>) min_<?php echo $propertyId ?> = min_<?php echo $propertyId ?>;
		params += 'min_<?php echo $propertyId ?>=' + min_<?php echo $propertyId ?> + '&'; todo = false;
	}

	if (document.getElementById('search_check_max_<?php echo $propertyId ?>').checked) {
		var max_<?php echo $propertyId ?> = document.getElementById('search_max_<?php echo $propertyId ?>').value;
		if (max_<?php echo $propertyId ?>) max_<?php echo $propertyId ?> = max_<?php echo $propertyId ?>;
		params += 'max_<?php echo $propertyId ?>=' + max_<?php echo $propertyId ?> + '&'; todo = false;
	}

	<?php elseif ($rendering == 'select' || $rendering == 'repository') : ?>

	if (document.getElementById('search_check_<?php echo $propertyId ?>').checked) {
		var <?php echo $propertyId ?> = document.getElementById('search_<?php echo $propertyId ?>').value;
		params += '<?php echo $propertyId ?>=' + <?php echo $propertyId ?> + '&'; todo = false;
	}

	<?php else : ?>

	if (document.getElementById('search_check_<?php echo $propertyId ?>').checked) {
		var <?php echo $propertyId ?> = document.getElementById('search_<?php echo $propertyId ?>').value;
		params += '<?php echo $propertyId ?>=' + <?php echo $propertyId ?> + '&'; todo = false;
	}
	
	<?php endif;?>

<?php endforeach;?>

	<?php
	$todoTitle = $this->translate('todo list', 'ppit-core', $context->getLocale());
	$searchTitle = $this->translate('search', 'ppit-core', $context->getLocale());
	?>
	$('#mode-text').text((todo) ? '<?php echo $todoTitle ?>' : '<?php echo $searchTitle ?>');

	return params;
}

// Export the list
function exportCommitmentList() {

	var params = getParams();
	document.location.href = '<?php echo $this->url('commitment/export', array('type' => $type)) ?>' + params;
}

function eraseCommitmentSearch() {

<?php foreach ($context->getConfig('commitment/search'.(($type) ? '/'.$type : ''))['main'] as $propertyId => $rendering) : ?>

	<?php if ($rendering == 'range') : ?>
	$('#search_min_<?php echo $propertyId ?>').val('');
	$('#search_max_<?php echo $propertyId ?>').val('');

	<?php else : ?>
	$('#search_<?php echo $propertyId ?>').val('');
	
	<?php endif;?>

<?php endforeach;?>

	getCommitmentList(getParams(), 'including_options_amount', 'DESC');
}

function sortCommitmentList(criterion) {

	var dir;
	ascCriterion = $('.glyphicon-triangle-top').first().parent().attr('id');
	descCriterion = $('.glyphicon-triangle-bottom').first().parent().attr('id');
	if (criterion + '-anchor' == ascCriterion) dir = 'DESC'; else dir = 'ASC';
	getCommitmentList(getParams(), criterion, dir);
}

function filterCommitmentList() {

	ascCriterion = $('.glyphicon-triangle-top').first().parent().attr('id');
	descCriterion = $('.glyphicon-triangle-bottom').first().parent().attr('id');
	if (ascCriterion) {
		criterion = ascCriterion.split('-')[0];
		dir = 'ASC';
	}
	else if (descCriterion) {
		criterion = descCriterion.split('-')[0];
		dir = 'DESC';
	}
	else {
		criterion = 'including_options_amount';
		dir = 'DESC';
	}
	getCommitmentList(getParams(), criterion, dir);
}

function connectCommitmentSearchInputs() {

	$('#erase-button').click(function () { 
		$('.search_input').val('');
		$('.search_check').attr('checked', false);
		filterCommitmentList();
	});
	$('#search-button').click(function () { 
		getCommitmentList(getParams(), 'including_options_amount', 'DESC');
	});

<?php foreach ($searchPage['main'] as $propertyId => $rendering) : ?>
	<?php $property = $configProperties[$propertyId] ?>

	<?php if ($propertyId == 'type') : ?>
	$('#search_<?php echo $propertyId ?>').change(function () { 
		document.location.href = '<?php echo $this->url('commitment/index') ?>/' + $('#search_type').val(); 
	});

	<?php elseif ($rendering == 'range') : ?>

	$('#search_check_min_<?php echo $propertyId ?>').change(function () {
		$('#search-button').removeClass('btn-default').addClass('btn-success');
		if (!document.getElementById('search_check_min_<?php echo $propertyId ?>').checked) {
			$('#search_min_<?php echo $propertyId ?>').val('');
		}
	});
	$('#search_min_<?php echo $propertyId ?>').keyup(function () { 
		document.getElementById('search_check_min_<?php echo $propertyId ?>').checked = true;	
		$('#search-button').removeClass('btn-default').addClass('btn-success');
	});
	$('#search_max_<?php echo $propertyId ?>').keyup(function () { 
		document.getElementById('search_check_max_<?php echo $propertyId ?>').checked = true;	
		$('#search-button').removeClass('btn-default').addClass('btn-success');
	});

		<?php if ($property['type'] == 'date') : ?>
	$("#search_min_<?php echo $propertyId ?>").datepicker();
	$("#search_max_<?php echo $propertyId ?>").datepicker();
		<?php endif;?>
	
	<?php else : ?>

	$('#search_check_<?php echo $propertyId ?>').change(function () {
		$('#search-button').removeClass('btn-default').addClass('btn-success');
		if (!document.getElementById('search_check_<?php echo $propertyId ?>').checked) {
			$('#search_<?php echo $propertyId ?>').val('');
		}
	});
	
		<?php if ($rendering == 'select' || $rendering == 'repository') : ?>

	$('#search_<?php echo $propertyId ?>').change(function () { 
		document.getElementById('search_check_<?php echo $propertyId ?>').checked = true;
		$('#search-button').removeClass('btn-default').addClass('btn-success');
	});
	
		<?php else : ?>
	$('#search_<?php echo $propertyId ?>').keyup(function () { 
		document.getElementById('search_check_<?php echo $propertyId ?>').checked = true;	
		$('#search-button').removeClass('btn-default').addClass('btn-success');
	});

		<?php if ($property['type'] == 'date') : ?>
	$("#search_<?php echo $propertyId ?>").datepicker();
	$('#search_<?php echo $propertyId ?>').change(function () { filterCommitmentList(); });
		<?php endif;?>

		<?php endif;?>
	<?php endif;?>

<?php endforeach;?>
}

// Load the list
function getCommitmentList(params, major, dir) {		
	// Execute the ajax request
	route = '<?php echo $this->url('commitment/list', array('type' => $type)) ?>' + params + '&major=' + major + ((dir =='ASC') ? '&dir=ASC' : '&dir=DESC');
	xhttp = new XMLHttpRequest();
	xhttp.open("GET", route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
			document.getElementById('commitment-list-panel').innerHTML = xhttp.responseText;

			$('.detail-row').hide();
			$('.invisible').hide();

			$('#export-button').click(function () { exportCommitmentList(); });
			
			$(function () {
			    $('.tip').tooltip({
			        content: function () {
			            return $(this).prop('title');
			        }
			    });
			});

			$('.to-mask').hide();
			
			// Connect the sort anchors
			$('.ppit-sort-anchor').each(function () {
				$(this).click(function () {
					sortCommitmentList($(this).attr('id').split('-')[0]);
				});
			});

			// Able the group action button
			$('.commitment-checkbox').click(function () {
				$('.group-anchor').removeAttr('disabled');
			});

			// Connect the check all checkbox
			$('#commitment-checkbox').click(function () {
				var current = document.getElementById('commitment-checkbox').checked;
				var commitmentNumber = $('#commitment-number').val();
				document.getElementById('down-commitment-checkbox').checked = (current) ? true : false;
				for (i = 0; i < commitmentNumber; i++) {
					document.getElementById('commitment-checkbox_' + i).checked = (current) ? true : false;
				}
			});
			$('#down-commitment-checkbox').click(function () {
				var current = document.getElementById('down-commitment-checkbox').checked;
				var commitmentNumber = $('#commitment-number').val();
				document.getElementById('commitment-checkbox').checked = (current) ? true : false;
				for (i = 0; i < commitmentNumber; i++) {
					document.getElementById('commitment-checkbox_' + i).checked = (current) ? true : false;
				}
			});
			
			// Connect the grouped actions anchors
			$('.group-anchor').each(function () {
				$(this).click(function () {
					getGroup();
				});
			});
			
			// Connect the detail anchors
			$('.commitment-detail-anchor').each(function () {
				$(this).click(function () {
					getCommitmentDetail($(this).attr('id').split('_')[1]);
				});
			});
			
			// Connect the distribution anchor
			$('.distribution').hide();
			var distributionValue = $('#select-distribution').val();
			$('#distribution_' + distributionValue).show();
			$('#select-distribution').change(function () {
				$('.distribution').hide();
				var distributionValue = $('#select-distribution').val();
				$('#distribution_' + distributionValue).show();
			});
	<?php if (!$config['isTraceActive']) : ?>
			}
	<?php endif;?>
		}
	}
	xhttp.send();
	$('#search-button').removeClass('btn-success').addClass('btn-default');
}

function connectAuditPanel()
{
	$('#audit-panel').hide();
	$('#audit-label').click(function () {
		if ($('#audit-label').text() == '<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>') {
			$('#audit-panel').show();
			$('#audit-label').text('<?php echo $this->translate('Mask', 'ppit-core', $context->getLocale()) ?>');
		}
		else {
			$('#audit-panel').hide();
			$('#audit-label').text('<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>');
		}
	});
}

function connectCgvPanel()
{
	$('#cgv-panel').hide();
	$('#cgv-label').click(function () {
		if ($('#cgv-label').text() == '<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>') {
			$('#cgv-panel').show();
			$('#cgv-label').text('<?php echo $this->translate('Mask', 'ppit-core', $context->getLocale()) ?>');
		}
		else {
			$('#cgv-panel').hide();
			$('#cgv-label').text('<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>');
		}
	});
}

function connectCommitmentInvoiceForm(id)
{			
		$('#commitment-invoice-anchor').removeClass('btn-default').addClass('btn-warning');

		// Create a new FormData object.
		var formData = new FormData();
		formData.append('update_time', $('#update_time').val());

		var xhttp = new XMLHttpRequest();
		var route, target;
		route = '<?php echo $this->url('commitment/invoice') ?>/' + id;
		xhttp.open('POST', route, true);
		xhttp.onload = function () {
			if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {
				getCommitmentDetail(id);
			}
		};
		xhttp.send(formData);
}

function getCommitmentInvoiceForm(id) {
	$('#commitment-invoice-anchor').removeClass('btn-default').addClass('btn-danger');
	$('#commitment-invoice-alert').show();
	$('#commitment-invoice-anchor').click(function () { connectCommitmentInvoiceForm(id); });
}

function connectCommitmentSettleForm(id)
{			
		$('#commitment-settle-anchor').removeClass('btn-default').addClass('btn-warning');

		// Create a new FormData object.
		var formData = new FormData();
		formData.append('update_time', $('#update_time').val());

		var xhttp = new XMLHttpRequest();
		var route, target;
		route = '<?php echo $this->url('commitment/settle') ?>/' + id;
		xhttp.open('POST', route, true);
		xhttp.onload = function () {
			if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {
				getCommitmentDetail(id);
			}
		};
		xhttp.send(formData);
}

function getCommitmentSettleForm(id) {
	$('#commitment-settle-anchor').removeClass('btn-default').addClass('btn-danger');
	$('#commitment-settle-alert').show();
	$('#commitment-settle-anchor').click(function () { connectCommitmentSettleForm(id); });
}

/////////////////////////////
// Commitment update panel //
/////////////////////////////

<?php 
$properties = array();

foreach ($updatePage as $propertyId => $updateOptions) {
	$property = $configProperties[$propertyId];
	if ($updateOptions && (!array_key_exists('readonly', $updateOptions) || !$updateOptions['readonly']) && $property['type'] != 'title') {
		if ($property['type'] == 'number') $properties[$propertyId] = array('type' => $property['type'], 'mandatory' => $updateOptions['mandatory'], 'minValue' => $property['minValue'], 'maxValue' => $property['maxValue']);
		else $properties['commitment-'.$propertyId] = array('type' => $property['type'], 'mandatory' => $updateOptions['mandatory'], 'maxSize' => ($property['type'] == 'textarea') ? 2047 : 255);
	}
}

$properties['update_time'] = array('type' => 'hidden');

echo $this->partial('/partials/check-update-properties', array('entity' => 'Commitment', 'context' => $context, 'properties' => $properties)) 
?>

function connectCommitmentUpdateForm(id, action)
{
	if (action == 'update') $('#commitment-update-anchor').removeClass('btn-default').addClass('btn-primary');
	if (action == 'delete') $('#commitment-delete-anchor').removeClass('btn-default').addClass('btn-primary');

<?php foreach ($properties as $property_id => $property) : ?>
	<?php if ($property['type'] == 'date') : ?>
		$('#input_<?php echo $property_id ?>').datepicker();
	<?php endif;?>
<?php endforeach ?>

	var form = document.getElementById('commitment-form');
	form.onsubmit = function(event) {
		
		event.preventDefault();
	
		// Check validity
		var validity = checkCommitmentUpdateProperties(id);
		if (validity) {
		
			// Create a new FormData object.
			var formData = new FormData();
			
			// Get the properties values
<?php foreach ($properties as $propertyId => $property) : ?>

	<?php if ($property['type'] == 'checkbox') : ?>
				formData.append('<?php echo $propertyId ?>', ((document.getElementById('<?php echo $propertyId ?>').checked) ? 1 : 0));

	<?php elseif ($property['type'] == 'file') : ?>
				var fileSelect = document.getElementById('order_form');
				if (fileSelect) {
					var files = fileSelect.files;
					for (var i = 0; i < files.length; i++) {
						var file = files[i];
						formData.append('order_form', file, file.name);
					}
				}

	<?php else : ?>
				formData.append('<?php echo $propertyId ?>', document.getElementById('<?php echo $propertyId ?>').value);

	<?php endif ?>

<?php endforeach ?>

			var xhttp = new XMLHttpRequest();
			var route, target;
			route = '<?php echo $this->url('commitment/update', array('type' => ($type) ? $type : 'generic')) ?>/' + id;
			if (action) route += '/' + action;
			target = 'commitment-update-panel';
			xhttp.open('POST', route, true);
			// Set up a handler for when the request finishes.
			xhttp.onload = function () {
				if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {

<?php if ($context->getConfig()['isTraceActive']) : ?>
					console.log('post, route = ' + route);
					console.log(xhttp.responseText);
<?php endif;?>
					document.getElementById(target).innerHTML = xhttp.responseText;
				}
			};
			xhttp.send(formData);
		}
		else return false;
	}
}

function getCommitmentUpdate(id, action) {
	var xhttp = new XMLHttpRequest();
	var route = '<?php echo $this->url('commitment/update', array('type' => ($type) ? $type : 'generic')) ?>/' + id;
	if (action) route += '/' + action;

	xhttp.open('GET', route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.readyState == 4) {
<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
<?php endif;?>
			document.getElementById('commitment-update-panel').innerHTML = xhttp.responseText;
			
			$(function () {
			    $('.tip').tooltip({
			        content: function () {
			            return $(this).prop('title');
			        }
			    });
			});

			$('#commitment-update-anchor').click(function () { getCommitmentUpdate(id, 'update'); });
			$('#commitment-delete-anchor').click(function () { getCommitmentUpdate(id, 'delete'); });
			$('#commitment-invoice-anchor').click(function () { getCommitmentInvoiceForm(id); });
			$('#commitment-invoice-alert').hide();
			$('#commitment-settle-anchor').click(function () { getCommitmentSettleForm(id); });
			$('#commitment-settle-alert').hide();
			
			connectCommitmentUpdateForm(id, action);
<?php if (!$config['isTraceActive']) : ?>
			}
<?php endif;?>
		}
	}
	xhttp.send();
}

function fillRowPrice() {
<?php foreach ($products as $product) : ?>
	<?php if (array_key_exists(0, $product->variants)) : ?>
	if ($('#product_identifier').val() == "<?php echo $product->reference ?>") {
		$('#input_unit_price').val('<?php echo $product->variants[0]['price'] ?>');
		$('#product_brand').val("<?php echo $product->brand ?>");
		$('#product_caption').val("<?php echo $product->caption ?>");
	}
	<?php endif;?>
<?php endforeach;?>
}

function fillOptionPrice(i) {
<?php foreach ($options as $option) : ?>
	<?php if (array_key_exists(0, $option->variants)) : ?>
	if ($('#option_identifier-' + i).val() == "<?php echo $option->reference ?>") {
		$('#input_option_unit_price-' + i).val('<?php echo $option->variants[0]['price'] ?>');
		$('#option_caption-' + i).val("<?php echo $option->caption ?>");
	}
	<?php endif;?>
<?php endforeach;?>
}

function fillAddOptionPrice() {
<?php foreach ($options as $option) : ?>
	<?php if (array_key_exists(0, $option->variants)) : ?>
	if ($('#option_identifier').val() == "<?php echo $option->reference ?>") $('#input_option_unit_price').val('<?php echo $option->variants[0]['price'] ?>');
	<?php endif;?>
<?php endforeach;?>
}

function connectCommitmentUpdateProductForm(id)
{
		var validity = true, error, number, val;
		$('#rows-error').text('');
		$('#rows-error').hide();
		
// Product identifier
		val = $('#product_identifier').val();
		if (!val) {
			$('#rows-error').text('<?php echo $this->translate('Please input a value', 'ppit-core', $context->getLocale()) ?>');
			$('#rows-error').show();
			document.getElementById('product_identifier').focus();
			validity = false;
		}
		else {
		    if (val.length > 255) {
				$('#rows-error').text('<?php echo $this->translate('The input is too long', 'ppit-core', $context->getLocale()) ?>');
				$('#rows-error').show();
				document.getElementById('product_identifier').focus();
				validity = false;
			}
		}
		
// Product caption
		val = $('#product_caption').val();
	    if (val.length > 255) {
			$('#rows-error').text('<?php echo $this->translate('The input is too long', 'ppit-core', $context->getLocale()) ?>');
			$('#rows-error').show();
			document.getElementById('product_caption').focus();
			validity = false;
		}
		
// Quantity
		number = $('#input_quantity').val();
		error = checkNumber(number, 0, 999999);
		if (error) {
			$('#rows-error').text(error);
			$('#rows-error').show();
			document.getElementById('input_quantity').focus();
			validity = false;
		}
	    else { 
			number = getNumber(number, 2);
			$('#quantity').val(number);
		}
		
// Unit price
		number = $('#input_unit_price').val();
		error = checkNumber(number, 0, 999999);
		if (error) {
			$('#rows-error').text(error);
			$('#rows-error').show();
			document.getElementById('input_unit_price').focus();
			validity = false;
		}
	    else { 
			number = getNumber(number, 2);
			$('#unit_price').val(number);
		}
	
		if (validity) {
			
			// Create a new FormData object.
			var formData = new FormData();
			formData.append('product_identifier', $('#product_identifier').val());
			formData.append('product_brand', $('#product_brand').val());
			formData.append('product_caption', $('#product_caption').val());
			formData.append('quantity', $('#quantity').val());
			formData.append('unit_price', $('#unit_price').val());
			formData.append('update_time', $('#update_time').val());
	
			var xhttp = new XMLHttpRequest();
			var route, target;
			route = '<?php echo $this->url('commitment/updateProduct') ?>/' + id;
			xhttp.open('POST', route, true);
			xhttp.onload = function () {
				if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {
					getCommitmentDetail(id);
				}
			};
			xhttp.send(formData);
		}
}

function connectCommitmentUpdateOptionForm(id)
{
	var count, validity = true, error, number, val, i;
	$('#rows-error').text('');
	$('#rows-error').hide();

	count = $('#optionCount').val();
	for (i = 0; i < count; i++) {
		
// Option identifier
		val = $('#option_identifier-' + i).val();
	    if (val.length > 255) {
			$('#rows-error').text('<?php echo $this->translate('The input is too long', 'ppit-core', $context->getLocale()) ?>');
			$('#rows-error').show();
			document.getElementById('option_identifier-' + i).focus();
			validity = false;
		}
		
// Option caption
		val = $('#option_caption-' + i).val();
	    if (val.length > 255) {
			$('#rows-error').text('<?php echo $this->translate('The input is too long', 'ppit-core', $context->getLocale()) ?>');
			$('#rows-error').show();
			document.getElementById('option_caption-' + i).focus();
			validity = false;
		}
		
// Quantity
		number = $('#input_option_quantity-' + i).val();
		error = checkNumber(number, 0, 999999);
		if (error) {
			$('#rows-error').text(error);
			$('#rows-error').show();
			document.getElementById('input_option_quantity-' + i).focus();
			validity = false;
		}
	    else { 
			number = getNumber(number, 2);
			$('#option_quantity-' + i).val(number);
		}
		
// Unit price
		number = $('#input_option_unit_price-' + i).val();
		error = checkNumber(number, -999999, 999999);
		if (error) {
			$('#rows-error').text(error);
			$('#rows-error').show();
			document.getElementById('input_option_unit_price-' + i).focus();
			validity = false;
		}
	    else { 
			number = getNumber(number, 2);
			$('#option_unit_price-' + i).val(number);
		}
	}

	if (validity) {

		// Create a new FormData object.
		var formData = new FormData();
		for (i = 0; i < count; i++) {
			formData.append('option_identifier-' + i, $('#option_identifier-' + i).val());
			formData.append('option_caption-' + i, $('#option_caption-' + i).val());
			formData.append('option_quantity-' + i, $('#option_quantity-' + i).val());
			formData.append('option_unit_price-' + i, $('#option_unit_price-' + i).val());
			formData.append('update_time', $('#update_time').val());
		}
	
		var xhttp = new XMLHttpRequest();
		var route, target;
		route = '<?php echo $this->url('commitment/updateOption') ?>/' + id + '/' + count;
		xhttp.open('POST', route, true);
		xhttp.onload = function () {
			if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {
				getCommitmentDetail(id);
			}
		};
		xhttp.send(formData);
	}
}

function connectCommitmentUpdateTermForm(id)
{
	var count, validity = true, error, number, val, i;
	$('#terms-error').text('');
	$('#terms-error').hide();

	count = $('#termCount').val();
	for (i = 0; i < count; i++) {
		
// Caption
		caption = $('#term_caption-' + i).val();
	    if (caption.length > 255) {
			$('#terms_caption-' + i + '-error').text('<?php echo $this->translate('The input is too long', 'ppit-core', $context->getLocale()) ?>');
			$('#terms_caption-' + i + '-error').show();
			document.getElementById('term_caption-' + i).focus();
			validity = false;
		}

// Due date	
 		term_due_date = $('#input_term_due_date-' + i).val();
		if (caption) {
			if (term_due_date == "") {
				$('#input_term_due_date-' + i + '-error').text('<?php echo $this->translate('Please input a value', 'ppit-core', $context->getLocale()) ?>');
				$('#input_term_due_date-' + i + '-error').show();
				document.getElementById('input_term_due_date-' + i).focus();
				validity = false;
			}
		 	else {
				error = checkDate(term_due_date);
				if (error) {
					$('#input_term_due_date-' + i + '-error').text(error);
					$('#input_term_due_date-' + i + '-error').show();
					document.getElementById('input_term_due_date-' + i).focus();
					validity = false;
				}
				else {
					term_due_date = encodeDate(term_due_date);
					$('#term_due_date-' + i).val(term_due_date);
				}
			}
		}

// Settlement date	
 		term_settlement_date = $('#input_term_settlement_date-' + i).val();
		if (caption) {
			if (term_settlement_date == "") {
				$('#input_term_settlement_date-' + i + '-error').text('<?php echo $this->translate('Please input a value', 'ppit-core', $context->getLocale()) ?>');
				$('#input_term_settlement_date-' + i + '-error').show();
				document.getElementById('input_term_settlement_date-' + i).focus();
				validity = false;
			}
		 	else {
				error = checkDate(term_settlement_date);
				if (error) {
					$('#input_term_settlement_date-' + i + '-error').text(error);
					$('#input_term_settlement_date-' + i + '-error').show();
					document.getElementById('input_term_settlement_date-' + i).focus();
					validity = false;
				}
				else {
					term_settlement_date = encodeDate(term_settlement_date);
					$('#term_settlement_date-' + i).val(term_settlement_date);
				}
			}
		}

// Collection date	
 		term_collection_date = $('#input_term_collection_date-' + i).val();
		if (caption) {
			if (term_collection_date == "") {
				$('#input_term_collection_date-' + i + '-error').text('<?php echo $this->translate('Please input a value', 'ppit-core', $context->getLocale()) ?>');
				$('#input_term_collection_date-' + i + '-error').show();
				document.getElementById('input_term_collection_date-' + i).focus();
				validity = false;
			}
		 	else {
				error = checkDate(term_collection_date);
				if (error) {
					$('#input_term_collection_date-' + i + '-error').text(error);
					$('#input_term_collection_date-' + i + '-error').show();
					document.getElementById('input_term_collection_date-' + i).focus();
					validity = false;
				}
				else {
					term_collection_date = encodeDate(term_collection_date);
					$('#term_collection_date-' + i).val(term_collection_date);
				}
			}
		}
		
// Means of payment
		val = $('#term_means_of_payment-' + i).val();
		if (caption && !val) {
			$('#term_means_of_payment-' + i + '-error').text('<?php echo $this->translate('Please input a value', 'ppit-core', $context->getLocale()) ?>');
			$('#term_means_of_payment-' + i + '-error').show();
			document.getElementById('term_means_of_payment-' + i).focus();
			validity = false;
		}
		else {
		    if (val.length > 255) {
				$('#term_means_of_payment-' + i + '-error').text('<?php echo $this->translate('The input is too long', 'ppit-core', $context->getLocale()) ?>');
				$('#term_means_of_payment-' + i + '-error').show();
				document.getElementById('term_means_of_payment-' + i).focus();
				validity = false;
			}
		}
		
// Status
		val = $('#term_status-' + i).val();
		if (caption && !val) {
			$('#term_status-' + i + '-error').text('<?php echo $this->translate('Please input a value', 'ppit-core', $context->getLocale()) ?>');
			$('#term_status-' + i + '-error').show();
			document.getElementById('term_status-' + i).focus();
			validity = false;
		}
		else {
		    if (val.length > 255) {
				$('#term_status-' + i + '-error').text('<?php echo $this->translate('The input is too long', 'ppit-core', $context->getLocale()) ?>');
				$('#term_status-' + i + '-error').show();
				document.getElementById('term_status-' + i).focus();
				validity = false;
			}
		}
		
// Amount
		number = $('#input_term_amount-' + i).val();
		error = checkNumber(number, 0, 999999);
		if (error) {
			$('#term_status-' + i + '-error').text(error);
			$('#term_status-' + i + '-error').show();
			document.getElementById('input_term_amount-' + i).focus();
			validity = false;
		}
	    else { 
			number = getNumber(number, 2);
			$('#term_amount-' + i).val(number);
		}
	}

	if (validity) {

		// Create a new FormData object.
		var formData = new FormData();
		for (i = 0; i < count; i++) {
			formData.append('term_caption-' + i, $('#term_caption-' + i).val());
			formData.append('term_due_date-' + i, $('#term_due_date-' + i).val());
			formData.append('term_settlement_date-' + i, $('#term_settlement_date-' + i).val());
			formData.append('term_collection_date-' + i, $('#term_collection_date-' + i).val());
			formData.append('term_means_of_payment-' + i, $('#term_means_of_payment-' + i).val());
			formData.append('term_status-' + i, $('#term_status-' + i).val());
			formData.append('term_amount-' + i, $('#term_amount-' + i).val());
			formData.append('term_document-' + i, $('#term_document-' + i).val());
		}
	
		var xhttp = new XMLHttpRequest();
		var route, target;
		route = '<?php echo $this->url('commitment/updateTerm') ?>/' + id + '/' + count;
		xhttp.open('POST', route, true);
		xhttp.onload = function () {
			if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {
				getCommitmentDetail(id);
			}
		};
		xhttp.send(formData);
	}
}

function connectCommitmentCreditStatusForm(id)
{
	// Create a new FormData object.
	var formData = new FormData();

	var xhttp = new XMLHttpRequest();
	var route, target;
	route = '<?php echo $this->url('commitment/suspend') ?>/' + id;
	xhttp.open('POST', route, true);
	// Set up a handler for when the request finishes.
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
			getCommitmentDetail(id);
	<?php if (!$config['isTraceActive']) : ?>
			}
	<?php endif;?>
		}
	}
	xhttp.send(formData);
}

// Load the detail panel
function getCommitmentDetail(id) {

	// Ensure the target is displayed
	$('#detail-row_' + id).show();

	// Anchor to the new panel
	$(location).attr('hash', 'detail-row_' + id);

	var route = '<?php echo $this->url('commitment/detail', array('type' => ($type) ? $type : 'generic')) ?>/' + id;

	// Execute the ajax request
	xhttp = new XMLHttpRequest();
	xhttp.open("GET", route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
			document.getElementById('detail-div_' + id).innerHTML = xhttp.responseText;

			connectAuditPanel();
			connectCgvPanel();

			$('#remove-anchor').click(function () {
				$('.detail-row').hide();
				filterCommitmentList();
			});

			getCommitmentUpdate(id, '');
			
			$('.detail-remove-anchor').click(function () { getCommitmentDetail(id); });

			$('#credit_status-action').click(function () {
				connectCommitmentCreditStatusForm(id);
			});

			$('#row-anchor').click(function () {
				$('.row-tr').hide();
				$('#row-tr').show();
			});
			$('.row-update-anchor').click(function () {
				$('.row-tr').hide();
				i = $(this).attr('id').split('_')[1]
				$('#row-tr_' + i).show();
			});
			$('#row-add-anchor').click(function () {
				$('.row-tr').hide();
				$('#row-tr-add').show();
			});
			$('.row-delete-anchor').click(function () {
				$('.row-tr').hide();
				i = $(this).attr('id').split('_')[1]
				$('#option_identifier-' + i).val('');
				$('#input_option_quantity-' + i).val('');
				$('#input_option_unit_price-' + i).val('');
				$('#row-tr_' + i).show();
			});
			$('.term-update-anchor').click(function () {
				$('.term-tr').hide();
				i = $(this).attr('id').split('_')[1]
				$('#term-tr_' + i).show();
				getTermUpdate($('#term_commitment_id').val(), $('#term_id-' + i).val(), '', 'term-update-panel_' + i);
			});
			$('#product_identifier').change(fillRowPrice);
			$('.option_identifier').each(function () {
				$(this).change(function () {
					fillOptionPrice($(this).attr('id').split('-')[1]);
				});
			});
			$('#row-action').click(function() {
				connectCommitmentUpdateProductForm(id);
			});
			$('.option-action').click(function() {
				connectCommitmentUpdateOptionForm(id);
			});
			$('.term-action').click(function() {
				connectCommitmentUpdateTermForm(id);
			});

			$('.part-button').hide();
/*			$('.part-button').click(function() { 
				id = $(this).attr('id').split('_')[1];
				if ($('#is-part-open_' + id).val() == 1) {
					$('#part-panel_' + id).hide(); 
					$('#part-button_' + id).removeClass('glyphicon-triangle-bottom').addClass('glyphicon-triangle-right');
					$('#is-part-open_' + id).val(0);
				}
				else {
					$('#part-panel_' + id).show(); 
					$('#part-button_' + id).removeClass('glyphicon-triangle-right').addClass('glyphicon-triangle-bottom');
					$('#is-part-open_' + id).val(1);
				}
			});*/

	<?php if (!$config['isTraceActive']) : ?>
			}
	<?php endif;?>
		}
	}
	xhttp.send();

	// Highlight the clicked button (and only it in its class)
	$('.index-btn').removeClass("btn-primary").addClass("btn-default");
	$('.index-btn').attr('disabled', 'disabled');
	$('#commitment-detail-anchor_' + id).removeClass("btn-default").addClass("btn-primary");
}

function getSearch()
{
	// Hide the other panels
	$('.ppit-panel').hide();
	$('#index_action').show();
	// Anchor to the main panel
	$(location).attr('hash', '#');
	var xhttp = new XMLHttpRequest();
	xhttp.open("GET", '<?php echo $this->url('commitment/search', array('type' => $type)) ?>', false);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$context->getConfig()['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
				document.getElementById('index_action').innerHTML = xhttp.responseText;
				<?php
				$todoTitle = $this->translate('todo list', 'ppit-core', $context->getLocale());
				?>
				$('#mode-text').text('<?php echo $todoTitle ?>');
				connectCommitmentSearchInputs();
				var params = '?';
	<?php foreach ($params as $id => $value) : ?>	
				params += '<?php echo $id?>=<?php echo $value ?>&'
	<?php endforeach;?>
				getCommitmentList(params, 'including_options_amount', 'DESC');
	<?php if (!$context->getConfig()['isTraceActive']) : ?>
			}
	<?php endif;?>
		}
	}
	xhttp.send();
}

// Grouped actions

<?php 
$properties = array();

foreach ($groupPage as $propertyId => $options) {
	$property = $configProperties[$propertyId];
	if ((!$options || !array_key_exists('readonly', $options) || !$options['readonly']) && $property['type'] != 'title') {
		if ($property['type'] == 'number') $properties[$propertyId] = array('type' => $property['type'], 'mandatory' => $updateOptions['mandatory'], 'minValue' => $property['minValue'], 'maxValue' => $property['maxValue']);
		else $properties[$propertyId] = array('type' => $property['type'], 'mandatory' => false, 'maxSize' => ($property['type'] == 'textarea' || $property['type'] == 'log') ? 2047 : 255);
	}
}
echo $this->partial('/partials/check-update-properties', array('entity' => 'Group', 'context' => $context, 'properties' => $properties)) 
?>

function postGroup()
{

<?php foreach ($properties as $propertyId => $property) : ?>
	<?php if ($property['type'] == 'date') : ?>
		$('#input_<?php echo $propertyId ?>').datepicker();
	<?php elseif ($property['type'] == 'time') : ?>
		$('#<?php echo $propertyId ?>').timepicker({ 'timeFormat': 'H:i:s' });
	<?php endif;?>

	<?php 
	if (in_array($property['type'], ['date', 'number'])) $inputId = 'input_'.$propertyId;
	else $inputId = $propertyId;
	?>
	$('#<?php echo $inputId ?>').change(function() {
		document.getElementById('<?php echo $propertyId ?>_check').checked = true;
	});
	$('#<?php echo $inputId ?>').keyup(function() {
		document.getElementById('<?php echo $propertyId ?>_check').checked = true;
	});
<?php endforeach ?>

	var form = document.getElementById('group-form');
	form.onsubmit = function(event) {
		event.preventDefault();
	
		// Check validity
		var validity;
		validity = checkGroupUpdateProperties();

		if (validity) {
		
			// Create a new FormData object.
			var formData = new FormData();
			formData.append('action', 'update');
			var nbCommitment = $('#group-nb-commitment').val();
			formData.append('nb-commitment', nbCommitment);
			for (i = 0; i < nbCommitment; i++) formData.append('commitment_' + i, $('#group-commitment_' + i).val());
			
			// Get the properties values
<?php foreach ($properties as $propertyId => $property) : ?>
	<?php if (in_array($property['type'], array('input', 'date', 'time', 'textarea', 'log', 'select', 'number', 'email', 'phone', 'hidden'))) : ?>
			formData.append('<?php echo $propertyId ?>', document.getElementById('<?php echo $propertyId ?>').value);
			formData.append('<?php echo $propertyId ?>_check', ((document.getElementById('<?php echo $propertyId ?>_check').checked) ? 1 : 0));

	<?php elseif ($property['type'] == 'checkbox') : ?>
			formData.append('<?php echo $propertyId ?>', ((document.getElementById('<?php echo $propertyId ?>').checked) ? 1 : 0));

	<?php endif ?>

<?php endforeach ?>
			formData.append('update_time', document.getElementById('update_time').value);

			var xhttp = new XMLHttpRequest();
			var route, target;
			route = '<?php echo $this->url('commitment/group', array('type' => $type)) ?>';
			xhttp.open('POST', route, true);
			xhttp.onload = function () {
				if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {
					document.getElementById('detail-div_0').innerHTML = xhttp.responseText;
				}

				$('#remove-anchor').click(function () {
					$('.detail-row').hide();
					filterCommitmentList();
				});
			};
			xhttp.send(formData);
		}
		else return false;
	}
}

function getGroup() {

	// Ensure the target is displayed
	$('#detail-row_0').show();
	$(location).attr('hash', 'detail-row_0');

	// Disabled the list checkboxes
	$('.commitment-checkbox').attr('disabled', 'disabled');
	var route = '<?php echo $this->url('commitment/group', array('type' => $type)) ?>';
	var formData = new FormData();

	var commitmentNumber = $('#commitment-number').val();
	for (i = 0, j = 0; i < commitmentNumber; i++) {
		if (document.getElementById('commitment-checkbox_' + i).checked) {
			formData.append('commitment_' + j, $('#commitment_' + i).val());
			j++;
		}
	}
	formData.append('nb-commitment', j);

	// Execute the ajax request
	xhttp = new XMLHttpRequest();
	xhttp.open("POST", route, true);
	xhttp.onreadystatechange = function() {
			if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$context->getConfig()['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>

			document.getElementById('detail-div_0').innerHTML = xhttp.responseText;
			postGroup();
			
			$('#remove-anchor').click(function () {
				$('.detail-row').hide();
				filterCommitmentList();
			});
	<?php if (!$context->getConfig()['isTraceActive']) : ?>
			}
	<?php endif;?>
		}
	}
	xhttp.send(formData);

	// Highlight the clicked button (and only it in its class)
	$('.index-btn').removeClass("btn-primary").addClass("btn-default");
	$('.commitment-group-anchor').removeClass("btn-default").addClass("btn-primary");
}

function activateCommitment() {
	getSearch();
}
